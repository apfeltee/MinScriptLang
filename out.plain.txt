==2088== Memcheck, a memory error detector
==2088== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2088== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==2088== Command: ./run sanity.msl
==2088== 
numbers:
basic branching:
3ok
loops:
for-loop: i=0
for-loop: i=1
for-loop: i=2
for-loop: i=3
for-loop: i=4
for-without-cond: i=0
for-without-cond: i=1
for-without-cond: i=2
for-without-cond: i=3
for-without-cond: i=4
for-without-cond: i=5
while(true): i=5
do-while: i=5
do-while: i=4
do-while: i=3
do-while: i=2
do-while: i=1
empty-for: i=0
empty-for: i=1
empty-for: i=2
empty-for: i=3
for-with-continue: i=0
for-with-continue: i=1
for-with-continue: i=2
for-with-continue: i=3
for-with-continue: i=4
for-with-continue: i=5
while-true-with-continue: i=-5
while-true-with-continue: i=-4
while-true-with-continue: i=-3
while-true-with-continue: i=-2
while-true-with-continue: i=-1
while-true-with-continue: i=0
while-true-with-continue: i=1
unary ops (i=1):
i++ = 1
i now = 2
i-- = i now = 1
other ops (+, -, /, *, %, etc) (a=1):
a after '+=' = 4
a after '-=' = -6
a after '*=' = 12
a after '/=' = 3
a after '%=' = 1
a after '<<=' = 4
a after '>>=' = 2
binary ops (a=6):
a after '|=' = 14
a after '&=' = 2
a after '^=' = 1
multiple assignment:
b *= a += 7 = a=8, b=16
a=b=c=2 = a=2, b=2, c=2
a=1; ++----++++a = 2
operator precedence: a+b+b-2+b*3 = 9
operator precedence: a&&b&&a&&b||a||a&&a = 0
syntax testing ....
a = aaa, ?: = 1
empty = 0
string literal concat = aabbcc
hexadecimal escapes in sq string = "\xA5 \xA5"
unicode escapes in sq string="\xC4\x84 \xC4\x84"
string concat = "aabbccaabbcc"
ternary: v=123
eq comparison: 1=1, 2=1, 3=0, 4=0, 5=0, 6=1
eq comparison: 110001
eq comparison (functions): 000111
eq comparison (copied native funcs): 000111
for-range: ch="A"
for-range: ch="B"
for-range: ch="C"
for-range: ch="D"
for-range with index: i=0, ch="A"
for-range with index: i=1, ch="B"
for-range with index: i=2, ch="C"
for-range with index: i=3, ch="D"
after loop: i=null, ch=null
switch statements:
switch-fallthrough...
switch-fallthrough: ok
swith with break
switch with defaultswitch-in-for: 0
switch-in-for: 1
switch-in-for: 2
switch-in-for: Other
switch-in-for: Other
changedefault: before: a=aaa
changedefault: after: a=1
changeglobal: before: a=1
changeglobal: after: a=2
changelocal: before: a=2
changelocal: after: a=3
changedefault: before: a=10
changedefault: after: a=1
changeglobal: before: a=1
changeglobal: after: a=2
changelocal: before: a=2
changelocal: after: a=3
changedefault: before: a=null
changedefault: after: a=1
changeglobal: before: a=null
changeglobal: after: a=2
changelocal: before: a=2
changelocal: after: a=3
functions: InnerNone called
functions: InnerLocal called
functions: InnerGlobal called
functions: InnerGlobal called
try-catch: caugh exception: 1
try-catch from function: ex=AAA
try-catch runtime: type=TypeError
try-catch runtime: index=6393
try-catch runtime: line=358
try-catch runtime: column=15
try-catch runtime: message=(%v) %s
<type 'String'>incompatible types for '+'try-finally: in try ...
try-finally in finally
AEXB100120023003400410012002300345005TryFinallynullfor... a... i=0
for... a... i=1
for... a... i=2
for... a... i=3

we good?

103throwing in catch
666before finally
ex=123
try before throw
try finally
catch1
1A13typeOf(globalArr) = <type 'Array'>
[]12310123056133310123001231nullnull123null011223nullnull011223ABYYN03array: a(6) = [102, 2, 4, 101, 5, 100]
array-iterate: i=1
array-iterate: i=2
array-iterate: i=3
<type 'Null'><type 'Number'><type 'String'><type 'Object'><type 'Number'><type 'Number'><type 'Null'>100110nullnull22AA110001231123<object @0x1ffeffeea8>null<object @0x1ffeffeea8>2<object @0x1ffeffeea8>2<object @0x1ffeffeea8>3<object @0x1ffeffeea8>3451235123451104411235610110001215715nullnull34563456334343obj2f10131024322222Default3this.var=2
this.var=3
this.var=1
Derived.a=121, Derived.b=124, Derived.c=null
o1=T, o2=T
o1['a']=123, o1['b']=124, o2.a=123, o2.b=124
exception.message = member access in something not an object
exception.message = member access in something not an object
exception.message = member access in something not an object
Foo
Foo
a = 1
b = 2, a=1
10a = 10
a = 1
1a(a+b) = [AAA] [BBB]
a(a+b) = [CCC] [DDD]
in functionNotReturning
functionNotReturning()     = null
in functionReturningNull
functionReturningNull()    = null
in functionReturningSomething
functionReturningSomething = 123
add(2,5)=7
factorial(0) = 1
factorial(3) = 6
factorial(4) = 24


if you can read this, everything is (probably) ok!
==2088== 
==2088== HEAP SUMMARY:
==2088==     in use at exit: 0 bytes in 0 blocks
==2088==   total heap usage: 6,325 allocs, 6,325 frees, 1,867,126 bytes allocated
==2088== 
==2088== All heap blocks were freed -- no leaks are possible
==2088== 
==2088== For lists of detected and suppressed errors, rerun with: -s
==2088== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
